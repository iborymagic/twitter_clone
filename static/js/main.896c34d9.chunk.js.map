{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Tweet.js","components/TweetFactory.js","routes/Home.js","components/GetMyTweets.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebaseConfig","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","REACT_APP_MESSAGIN_ID","appId","firebase","firebaseInstance","authService","dbService","storageService","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","e","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","auth","GoogleAuthProvider","signInWithPopup","GithubAuthProvider","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Tweet","tweetObj","userObj","isOwner","editing","setEditing","text","newTweet","setNewTweet","like","setLike","useEffect","likedBy","indexOf","uid","document","getElementById","id","addEventListener","shareTweet","content","parentNode","querySelector","tempInput","createElement","setAttribute","appendChild","select","execCommand","removeChild","alert","onDeleteClick","window","confirm","doc","delete","attachmentUrl","refFromURL","toggleEditing","toggleLike","thisTweet","userIdx","splice","push","update","key","autoFocus","creatorImage","alt","src","faUserCircle","creatorName","creatorMail","faTrash","faPencilAlt","faHeart","faShare","TweetFactory","tweet","setTweet","attachment","setAttachment","attachmentRef","ref","child","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","displayName","profileImage","collection","set","maxLength","faFeatherAlt","htmlFor","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","backgroundImage","faTimes","Home","tweets","setTweets","isCancelled","onSnapshot","snapshot","tweetArray","docs","map","data","sort","b","GetMyTweets","myTweets","setMyTweets","seeMyTweets","setSeeMyTweets","getMyTweets","where","orderBy","get","myTweetsArray","refreshUser","history","useHistory","newDisplayName","setNewDisplayName","photo","setPhoto","submitting","setSubmitting","oldPhoto","photoUrl","changed","photoRef","then","snapshots","forEach","item","updateProfile","photoURL","signOut","Navigation","to","faUser","AppRouter","isLoggedIn","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","args","getFullYear","currentUser","Boolean","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.896c34d9.chunk.js","sourcesContent":["import * as firebase from 'firebase/app';\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\r\n    appId: process.env.REACT_APP_APP_ID\r\n};\r\n// CRA 사용 시에는 환경변수의 이름이 REACT_APP으로 시작해야한다. 반드시.\r\n// .env의 사용은 실제 빌드 시에는 보안에 도움이 되지 않는다. 깃헙에 올릴 때만 도움이 되는 것.\r\n// .env는 루트 디렉토리에 있어야 함.\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\nexport const authService = firebase.auth();\r\nexport const dbService = firebase.firestore();\r\nexport const storageService = firebase.storage();","// component를 나누는 기준은 딱히 없음.\r\n// 그냥 어떤 단위의 태그로 인해 코드가 지나치게 길어진다면, 걔를 따로 분리해주면 됨.\r\n// 하나의 component는 한 가지 역할만 잘 하면 된다.\r\nimport { authService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport \"components/AuthForm.css\";\r\n\r\nconst AuthForm = () => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [newAccount, setNewAccount] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n\r\n    const toggleAccount = () => setNewAccount((prev) => !prev);\r\n\r\n    const onChange = e => {\r\n        const {target : {name, value}} = e;\r\n        \r\n        if(name === \"email\") {\r\n            setEmail(value);\r\n        } else if(name === \"password\") {\r\n            setPassword(value);\r\n        }\r\n    };\r\n\r\n    const onSubmit = async e => {\r\n        e.preventDefault();\r\n        try {\r\n            if(newAccount) {\r\n                // create account\r\n                await authService.createUserWithEmailAndPassword(email, password);\r\n                /*\r\n                const userInfo = {\r\n                    displayName : null,\r\n                    profileImage : null\r\n                }\r\n                \r\n                await dbService.collection(\"users\").doc(data.user.uid).set(userInfo);\r\n                */\r\n            } else {\r\n                // log in\r\n                await authService.signInWithEmailAndPassword(email, password);\r\n            }\r\n        } catch(error) {\r\n            setError(error.message);\r\n        }\r\n\r\n    };\r\n\r\n    return (\r\n        <>\r\n        <form onSubmit={onSubmit} className=\"container\">\r\n            <input type=\"email\" name=\"email\" className=\"authInput\" placeholder=\"Email\" required value={email} onChange={onChange} />\r\n            <input type=\"password\" name=\"password\" className=\"authInput\" placeholder=\"Password\" required value={password} onChange={onChange} />\r\n            <input type=\"submit\" className=\"authSubmit\" value={newAccount ? \"Create New Account\" : \"Sign In\"} />\r\n            {error && <span className=\"authError\">error</span>}\r\n        </form>\r\n        <span onClick={toggleAccount} className=\"authSwitch\">\r\n            {newAccount ? \"Sign In\" : \"Create New Account\"}\r\n        </span>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AuthForm;","import { authService, firebaseInstance } from \"fbase\";\r\nimport React from \"react\";\r\nimport AuthForm from \"components/AuthForm\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter, faGoogle, faGithub} from \"@fortawesome/free-brands-svg-icons\";\r\nimport \"routes/Auth.css\";\r\n\r\nconst Auth = () => {\r\n    const onSocialClick = async e => {\r\n        const {target : {name}} = e;\r\n        let provider;\r\n        if(name === \"google\") {\r\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n            await authService.signInWithPopup(provider);\r\n        } else if(name === \"github\") {\r\n            provider = new firebaseInstance.auth.GithubAuthProvider();\r\n            await authService.signInWithPopup(provider);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"authContainer\">\r\n            <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"3x\" style={{ marginBottom : 30 }} />\r\n            <AuthForm />\r\n            <div className=\"authBtns\">\r\n                <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\r\n                    Sign in with Google <FontAwesomeIcon icon={faGoogle} />\r\n                </button>\r\n                <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\r\n                    Sign in with Github <FontAwesomeIcon icon={faGithub} />\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\nexport default Auth;","import { dbService, storageService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faPencilAlt, faUserCircle, faHeart, faShare } from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"components/Tweet.css\";\r\n\r\nconst Tweet = ({tweetObj, userObj, isOwner}) => {\r\n    const [editing, setEditing] = useState(false); // editing mode인지를 알려주는 boolean\r\n    const [newTweet, setNewTweet] = useState(tweetObj.text); // input에 입력된 text를 가져다 update해줌\r\n    const [like, setLike] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const userIdx = tweetObj.likedBy.indexOf(userObj.uid);\r\n        if(userIdx !== -1) {\r\n            setLike(true);\r\n        }\r\n\r\n        const shareBtn = document.getElementById(tweetObj.id);\r\n        shareBtn.addEventListener(\"click\", shareTweet);\r\n    }, []);\r\n\r\n    const shareTweet = () => {\r\n        const startNode = document.getElementById(tweetObj.id);\r\n        const content = startNode.parentNode.parentNode.querySelector('h4');\r\n\r\n        const text = tweetObj.text;\r\n        const tempInput = document.createElement(\"input\");\r\n        tempInput.setAttribute(\"type\", \"text\");\r\n        content.appendChild(tempInput);\r\n        tempInput.value = text;\r\n        tempInput.select();\r\n        document.execCommand('copy'); // 클립보드에 복사\r\n        content.removeChild(tempInput);\r\n        alert('Tweet has copied to your clipboard.');\r\n    };\r\n\r\n    const onDeleteClick = async () => {\r\n        const ok = window.confirm(\"Are you sure you want to delete this tweet?\");\r\n        if(ok) {\r\n            // doc(document)의 id를 알고있기 때문에 삭제의 구현이 어렵지 않다.\r\n            await dbService.doc(`tweets/${tweetObj.id}`).delete();\r\n            if(tweetObj.attachmentUrl) {\r\n                await storageService.refFromURL(tweetObj.attachmentUrl).delete();\r\n            }\r\n        }\r\n    };\r\n\r\n    const toggleEditing = () => setEditing((prev) => !prev);\r\n\r\n    const toggleLike = async () => {\r\n        setLike((prev) => !prev);\r\n        const thisTweet = {...tweetObj};\r\n        \r\n        if(!like) {\r\n            thisTweet.likedBy.push(userObj.uid);\r\n        } else {\r\n            const userIdx = thisTweet.likedBy.indexOf(userObj.uid);\r\n            if(userIdx !== -1) {\r\n                thisTweet.likedBy.splice(userIdx, 1);\r\n            }    \r\n        }\r\n\r\n        await dbService.doc(`tweets/${tweetObj.id}`).update({\r\n            ...thisTweet\r\n        });\r\n    }\r\n    \r\n    const onSubmit = async e => {\r\n        // update tweet 구현\r\n        e.preventDefault();\r\n        await dbService.doc(`tweets/${tweetObj.id}`).update({\r\n            text : newTweet\r\n        });\r\n        toggleEditing();\r\n    };\r\n\r\n    const onChange = e => {\r\n        // update tweet input의 내용이 변하면 그대로 newTweet에 적용\r\n        const {target : {value}} = e;\r\n        setNewTweet(value);\r\n    };\r\n\r\n    return (\r\n        <div className=\"tweet\" key={tweetObj.id}>\r\n            {editing ? (\r\n                <>\r\n                    <form onSubmit={onSubmit} className=\"container tweetEdit\">\r\n                        <input type=\"text\" placeholder=\"Edit your tweet!\" onChange={onChange} value={newTweet} required autoFocus className=\"formInput\"/>\r\n                        <input type=\"submit\" value=\"Update tweet\" className=\"formBtn updateBtn\" />\r\n                        <span onClick={toggleEditing} className=\"formBtn cancelBtn\">Cancel</span>\r\n                    </form>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    {tweetObj.creatorImage ? <div className=\"creator_img_frame\"><img className=\"creator_img\" alt=\"\" src={tweetObj.creatorImage} /></div> : <FontAwesomeIcon icon={faUserCircle} size=\"3x\" color={\"gray\"} />}\r\n                \r\n                    <div className=\"tweet_content\">\r\n                        <h1>{tweetObj.creatorName ? tweetObj.creatorName : tweetObj.creatorMail}</h1>\r\n                        <h2>{tweetObj.creatorMail}</h2>\r\n                        <h4>{tweetObj.text}</h4>\r\n                        {tweetObj.attachmentUrl && <div className=\"tweet_imgFrame\"><img className=\"tweet_img\" alt=\"\" src={tweetObj.attachmentUrl} /></div>}\r\n                        {/* 트윗을 삭제하거나 수정하는 버튼이 해당 트윗의 작성자에게만 보이도록 */}\r\n                        {isOwner && (\r\n                            <>\r\n                                <div className=\"tweet__actions\">\r\n                                    <span onClick={onDeleteClick}>\r\n                                        <FontAwesomeIcon icon={faTrash} color={\"white\"} />\r\n                                    </span>\r\n                                    <span onClick={toggleEditing}>\r\n                                        <FontAwesomeIcon icon={faPencilAlt} color={\"white\"} />\r\n                                    </span>\r\n                                </div>\r\n                            </>\r\n                        )}\r\n                        <div className=\"tweet__icons\">\r\n                            <span onClick={toggleLike}>\r\n                                <FontAwesomeIcon icon={faHeart} size={\"lg\"} color={like ? \"#ff4ca2\" : \"gray\"} />\r\n                            </span>\r\n                            <span id={tweetObj.id}>\r\n                                <FontAwesomeIcon icon={faShare} size={\"lg\"} color={\"gray\"} />\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            )}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Tweet;","import { storageService, dbService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes, faFeatherAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"components/TweetFactory.css\";\r\n\r\nconst TweetFactory = ({ userObj }) => {\r\n    const [tweet, setTweet] = useState(\"\");\r\n    const [attachment, setAttachment] = useState(\"\"); // attachment = file\r\n\r\n    const onSubmit = async e => {\r\n        if(tweet === \"\") {\r\n            return;\r\n        }\r\n\r\n        e.preventDefault();\r\n        let attachmentUrl = \"\";\r\n\r\n        if(attachment !== \"\") { // attachment를 올리지 않을 수도 있으므로.\r\n            const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\r\n            const response = await attachmentRef.putString(attachment, \"data_url\");\r\n            attachmentUrl = await response.ref.getDownloadURL();\r\n        }\r\n\r\n        const tweetObj = {\r\n            text : tweet,\r\n            createdAt : Date.now(),  \r\n            creatorId : userObj.uid, // userObj의 uid를 creatorID로 지정. 가입된 사용자의 고유한 id임.\r\n            creatorName : userObj.displayName,\r\n            creatorImage : userObj.profileImage,\r\n            creatorMail : userObj.email,\r\n            attachmentUrl : attachmentUrl,\r\n            likedBy : []\r\n        }\r\n        \r\n        await dbService.collection(\"tweets\").doc('' + tweetObj.createdAt).set(tweetObj);\r\n        setTweet(\"\");\r\n        setAttachment(\"\");\r\n    };\r\n\r\n    const onChange = e => {\r\n        const {target : {value}} = e;\r\n        setTweet(value);\r\n    };\r\n\r\n    const onFileChange = e => {\r\n        const {target : {files}} = e;\r\n        const theFile = files[0]; // 어차피 파일은 하나만 올릴거니까.\r\n        // file을 읽기 위해 fileReader API를 사용\r\n        const reader = new FileReader();\r\n        reader.onloadend = finishedEvent => { // reader에 event listener 추가\r\n            // reader에서 파일을 load하는 이벤트가 end되는 순간,\r\n            // 그 event를 finishedEvent 매개변수로 받아온다.\r\n            \r\n            // console.log(finishedEvent);\r\n            // 얘를 console.log 찍어보면 result라는 property가 있음.\r\n            // 걔를 브라우저 URL로 입력해보면 사진이 나옴.\r\n            const {currentTarget : {result}} = finishedEvent;\r\n            setAttachment(result);\r\n        }\r\n        reader.readAsDataURL(theFile); // 사진 파일을 긴 문자열로 얻음\r\n\r\n    };\r\n\r\n    const onClearAttachment = () => setAttachment(\"\");\r\n\r\n    return (\r\n        <>\r\n        <div className=\"factory__hello\">\r\n            Hello, <p className=\"user__name\">{userObj.displayName ? userObj.displayName : 'User'}. </p>\r\n            <br />Let me know your feelings.\r\n        </div>\r\n        <form onSubmit={onSubmit} className=\"factoryForm\">\r\n            <div className=\"factoryInput__container\">\r\n                <input type=\"text\" className=\"factoryInput__input\" value={tweet} onChange={onChange} placeholder=\"What's on your mind?\" maxLength={120}></input>\r\n                <button type=\"submit\" className=\"factoryInput__arrow\"><FontAwesomeIcon icon={faFeatherAlt} size=\"lg\"/></button>\r\n            </div>\r\n            <label htmlFor=\"attach-file\" className=\"factoryInput__label\">\r\n                <span>Add photos</span>\r\n                <FontAwesomeIcon icon={faPlus} />\r\n            </label>\r\n            <input type=\"file\" id=\"attach-file\" accept=\"image/*\" onChange={onFileChange} />\r\n            {/* 이미지 파일만 허용. 이미지 파일이기만 하면 뭐든 상관 x */}\r\n            {attachment && \r\n                <>\r\n                <div className=\"factoryForm__attachment\">\r\n                    <img alt=\"\" src={attachment} className=\"factoryForm__img\" style={{backgroundImage : attachment}} />\r\n                </div>\r\n                <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\r\n                    <span>Remove</span>\r\n                    <FontAwesomeIcon icon={faTimes} />\r\n                </div>\r\n                </>\r\n            }\r\n            {/* attachment가 있을 때만 attachment를 보여준다. */}\r\n        </form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TweetFactory;","import Tweet from \"components/Tweet\";\r\nimport TweetFactory from \"components/TweetFactory\";\r\nimport { dbService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"routes/Home.css\";\r\n\r\nconst Home = ({userObj}) => {\r\n    const [tweets, setTweets] = useState([]);\r\n    let isCancelled = false;\r\n    // const [visibleTweets, setVisibleTweets] = useState(0);\r\n\r\n    // const getTweets = async () => {\r\n    //     // async여야 하기 때문에 별도의 함수로 분리\r\n    //     const dbTweets = await dbService.collection(\"tweets\").get();\r\n    //     dbTweets.forEach(document => {\r\n    //         // tweets 배열에다가 dbTweets의 데이터를 집어넣음.\r\n    //         // 기존에 있던 원소들을 유지하기 위해 ...prev로 걔네들도 넣어줌.\r\n    //         const tweetObject = {\r\n    //             ...document.data(),\r\n    //             id : document.id\r\n    //         }\r\n    //         setTweets((prev) => [tweetObject, ...prev]);\r\n    //          // setter 함수의 매개변수로 함수를 넣어주면, 해당 state의 이전 값을 받아올 수 있음.\r\n    //     });\r\n    // }\r\n        \r\n    // 현재 불러온 데이터의 끝까지 스크롤이 되면 visibleTweets를 5 더해줌\r\n    /*\r\n    const infiniteScroll = () => {\r\n        let scrollbarTop = Math.ceil(document.documentElement.scrollTop || document.body.scrollTop);\r\n        let contentHeight = Math.max(document.documentElement.scrollHeight, document.body.scrollHeight);\r\n\r\n        if(document.documentElement.clientHeight + scrollbarTop >= contentHeight) {\r\n            // setVisibleTweets(visibleTweets + 5);\r\n        }\r\n    }\r\n    */\r\n    useEffect(() => {\r\n        // window.addEventListener(\"scroll\", infiniteScroll);\r\n\r\n        // getTweets();\r\n\r\n        // Snapshot을 리스너로 사용하는 방법(실시간 갱신이 가능)\r\n        // snapshot은 데이터베이스에 create, read, update, delete 등 어떤 일이 일어나건 간에 알림을 받게 된다.\r\n        // getTweets와 하는 역할은 동일하지만, re-render가 되지 않는다는 장점이 있다.\r\n        dbService.collection(\"tweets\").onSnapshot(snapshot => {\r\n            // database의 snapshot을 가져와서 배열로 만들어줌.\r\n            // query를 이용하는 게 아니라 snapshot을 이용하기 때문에, 실시간으로 확인이 가능하다.\r\n            const tweetArray = snapshot.docs.map(doc => ({\r\n                id : doc.id,\r\n                ...doc.data() \r\n            }));\r\n\r\n            if(!isCancelled) {\r\n                setTweets(tweetArray.sort((a, b) => b.createdAt - a.createdAt));\r\n            }\r\n        }, (error) => {\r\n        });\r\n        /*\r\n        return () => {\r\n            window.removeEventListener(\"scroll\", infiniteScroll);\r\n        };\r\n        */\r\n       return () => {\r\n           isCancelled = true;\r\n       };\r\n    }, []);\r\n\r\n    // visibleTweets의 변경에 대응하는 useEffect\r\n    /*\r\n    useEffect(() => {\r\n        dbService.collection(\"tweets\").onSnapshot(snapshot => {\r\n            const tweetArray = snapshot.docs.slice(visibleTweets, visibleTweets + 5).map(doc => ({\r\n                id : doc.id,\r\n                ...doc.data() \r\n            }));\r\n            setTweets(tweets.concat(...tweetArray).sort((a, b) => b.createdAt - a.createdAt));\r\n        }, (error) => {\r\n        });\r\n    }, [visibleTweets]);\r\n*/\r\n    return(\r\n        <div className=\"container\">\r\n            <TweetFactory userObj={userObj} />\r\n            <div className=\"tweet__list\">\r\n                {tweets.map((tweet) => (\r\n                    <Tweet key={tweet.id} tweetObj={tweet} userObj={userObj} isOwner={tweet.creatorId === userObj.uid} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n// 참고로, 하나의 component 내부에서 너무 많은 것들을 하면 안된다. 분리가 필요함.\r\n\r\nexport default Home;","import React, { useEffect, useState } from \"react\";\r\nimport { dbService } from \"fbase\";\r\nimport Tweet from \"components/Tweet\";\r\nimport \"components/GetMyTweets.css\";\r\n\r\nconst GetMyTweets = ({ userObj }) => {\r\n    const [myTweets, setMyTweets] = useState([]);\r\n    const [seeMyTweets, setSeeMyTweets] = useState(false);\r\n    let isCancelled = false;\r\n\r\n    const toggleMyTweets = () => {\r\n        if(seeMyTweets) {\r\n            setSeeMyTweets(false);\r\n        } else {\r\n            setSeeMyTweets(true);\r\n        }\r\n    };\r\n\r\n    const getMyTweets = async () => {\r\n        const tweets = await dbService\r\n                    .collection(\"tweets\")\r\n                    .where(\"creatorId\", \"==\", userObj.uid)\r\n                    .orderBy(\"createdAt\")\r\n                    .get();\r\n        // where은 필터링의 역할.\r\n        // creatorId라는 field path의 값이 userObj.uid와 같은 애들을 필터링해줌.\r\n        // 원한다면, where 뒤에 또 다른 where을 연달아 사용 가능.\r\n        // orderBy를 추가하면 index가 필요하다는 에러가 발생하는데, index 만들어주면 됨.\r\n    \r\n        const myTweetsArray = tweets.docs.map((doc) => ({\r\n            id : doc.id,\r\n            ...doc.data()\r\n        }));\r\n        \r\n        if(!isCancelled) {\r\n            setMyTweets(myTweetsArray.sort((a, b) => b.createdAt - a.createdAt));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(seeMyTweets) {\r\n            getMyTweets();\r\n        } else {\r\n            setMyTweets([]);\r\n        }\r\n\r\n        return () => {\r\n            isCancelled = true;\r\n        }\r\n    }, [seeMyTweets]);\r\n    \r\n    return (\r\n        <>\r\n            <span className=\"formBtn getTweets\" onClick={toggleMyTweets}>\r\n                {seeMyTweets ? \"Close My Tweets\" : \"Get My Tweets\"}\r\n            </span>\r\n            {myTweets.map((tweet) => (<Tweet key={tweet.id} userObj={userObj} tweetObj={tweet} isOwner={tweet.creatorId === userObj.uid} />))}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GetMyTweets;","import { authService, dbService, storageService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faUserCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport GetMyTweets from \"components/GetMyTweets\";\r\nimport \"routes/Profile.css\";\r\n\r\nexport default ({ refreshUser, userObj }) => {\r\n    const history = useHistory();\r\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n    const [photo, setPhoto] = useState(userObj.profileImage);\r\n    const [submitting, setSubmitting] = useState(false);\r\n    const oldPhoto = userObj.profileImage;\r\n    let isCancelled = false;\r\n\r\n    const onSignOutClick = () => {\r\n        authService.signOut();\r\n        history.push(\"/\");\r\n    };\r\n\r\n    const onChange = (e) => {\r\n        const {target : {value}} = e;\r\n        setNewDisplayName(value);\r\n    }\r\n\r\n    const onFileChange = e => {\r\n        const {target : {files}} = e;\r\n        const theFile = files[0]; \r\n        const reader = new FileReader();\r\n        reader.onloadend = finishedEvent => { // reader에 event listener 추가\r\n            // reader에서 파일을 load하는 이벤트(아래의 readAsDataURL로 인해 일어남)가 end되는 순간,\r\n            // 그 event를 finishedEvent 매개변수로 받아온다.\r\n            \r\n            // console.log(finishedEvent);\r\n            // 얘를 console.log 찍어보면 result라는 property가 있음.\r\n            // 걔를 브라우저 URL로 입력해보면 사진이 나옴.\r\n            const {currentTarget : {result}} = finishedEvent;\r\n            if(!isCancelled) {\r\n                setPhoto(result);\r\n            }\r\n        }\r\n        reader.readAsDataURL(theFile); // 사진 파일을 긴 문자열로 얻음\r\n    };\r\n\r\n    const onSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        let photoUrl = userObj.profileImage;\r\n        let displayName = userObj.displayName;\r\n        let changed = false;\r\n\r\n        setSubmitting(true);\r\n\r\n        if(oldPhoto !== photo) {\r\n            //const photoRef = storageService.ref().child(`${userObj.uid}_profile/${uuidv4()}`);\r\n            const photoRef = storageService.ref(`profile/${userObj.uid}`); // 이렇게 하면 유저 하나당 하나의 프로필 사진\r\n            // 이전과 달라진 게 없으면 submit이 안먹히도록 해야됨.\r\n            const response = await photoRef.putString(photo, \"data_url\"); // storage에 사진 저장\r\n            photoUrl = await response.ref.getDownloadURL();\r\n            //console.log(await storageService.refFromURL(newPhotoUrl));\r\n\r\n            const myTweets = await dbService.collection(\"tweets\");\r\n                \r\n            myTweets.where(\"creatorId\", \"==\", userObj.uid).get()\r\n                .then(snapshots => {\r\n                    if(snapshots.size > 0) {\r\n                        snapshots.forEach(item => {\r\n                            myTweets.doc(item.id).update({\r\n                                creatorImage : photoUrl\r\n                            });\r\n                        });\r\n                    }\r\n                });\r\n\r\n            changed = true;\r\n        }\r\n        \r\n        if(userObj.displayName !== newDisplayName) {\r\n            displayName = newDisplayName;\r\n            changed = true;\r\n        }\r\n        \r\n        if(changed) {\r\n            await userObj.updateProfile({\r\n                displayName : displayName,\r\n                photoURL : photoUrl\r\n            });\r\n            refreshUser();\r\n        }\r\n        changed = false;\r\n\r\n        setSubmitting(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            isCancelled = true;\r\n        }\r\n    }, []);\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <form className=\"profile__photoForm\">\r\n                <div className=\"profile__photo\">\r\n                    {photo ? \r\n                    <img alt=\"\" src={photo} className=\"profile__img\" style={{backgroundImage : photo}} /> : \r\n                    <FontAwesomeIcon icon={faUserCircle} color={\"#727b89\"} size=\"10x\" />\r\n                    }\r\n                </div>\r\n                <label htmlFor=\"attach-file\" className=\"profile__label\">\r\n                    <span>Add Profile Photo</span>\r\n                    <FontAwesomeIcon icon={faPlus} />\r\n                </label>\r\n                <input type=\"file\" id=\"attach-file\" accept=\"image/*\" onChange={onFileChange} />\r\n            </form>\r\n            <form onSubmit={onSubmit} className=\"profileForm\">\r\n                <input onChange={onChange} type=\"text\" autoFocus placeholder=\"Display name\" value={newDisplayName} className=\"formInput\" />\r\n                <input type=\"submit\" value={submitting ? \"Submitting..\" : \"Update Profile\"} className=\"formBtn updateBtn\" />\r\n            </form>\r\n            <GetMyTweets userObj={userObj} />\r\n            <span className=\"formBtn logOut\" onClick={onSignOutClick}>\r\n                Log Out\r\n            </span>\r\n        </div>\r\n    ); \r\n}","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"components/Navigation.css\";\r\n\r\nconst Navigation = () => {\r\n        return(\r\n        <nav>\r\n            <ul className=\"navigation__ul\">\r\n                <li>\r\n                    <Link to=\"/\" className=\"home__link\">\r\n                        <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"4x\" />\r\n                    </Link>\r\n                </li>\r\n                <li>\r\n                    <Link to=\"/profile\" className=\"profile__link\">\r\n                        <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"4x\" />\r\n                    </Link>\r\n                </li>\r\n            </ul>\r\n        </nav>        \r\n    );\r\n}\r\n\r\nexport default Navigation;","import React from \"react\";\r\nimport {HashRouter as Router, Route, Switch} from \"react-router-dom\";\r\nimport Auth from \"routes/Auth\";\r\nimport Home from \"routes/Home\";\r\nimport Profile from \"routes/Profile\";\r\nimport Navigation from \"components/Navigation\";\r\nimport \"components/Router.css\";\r\n\r\nconst AppRouter = ({refreshUser, isLoggedIn, userObj}) => {\r\n    return (\r\n        <Router>\r\n            {isLoggedIn && <Navigation />} \r\n            {/* 로그인이 되어 있을 때만 Navigation을 보여줌. */}\r\n            <Switch> \r\n                {isLoggedIn ? (\r\n                    // switch는 하위 라우터들 중 한 번에 하나의 Router만 보여줌.\r\n                    // Log in이 되어있으면 Home 화면만 보여줌.\r\n                    <>\r\n                        <div className=\"router__container\">\r\n                            <Route exact path = \"/\">\r\n                                <Home userObj={userObj} />\r\n                            </Route>\r\n                            <Route exact path = \"/profile\">\r\n                                <Profile refreshUser={refreshUser} userObj={userObj} />\r\n                            </Route>\r\n                            {/*<Redirect from=\"*\" to=\"/\" />*/}\r\n                        </div>\r\n                    </>\r\n                    // <> </>는 Fragment. 부모 요소가 없는 많은 요소들을 render 하고싶을 때, 근데 div나 span에 집어넣기는 싫을 때 사용.\r\n                ) : (\r\n                    // Log in이 되어 있지 않으면 Auth 화면을 보여줌.\r\n                    <>\r\n                        <Route exact path = \"/\">\r\n                            <Auth />\r\n                        </Route>\r\n                        {/*<Redirect from=\"*\" to=\"/\" />*/}\r\n                    </>\r\n                )}\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default AppRouter;","import React, { useEffect, useState } from 'react';\nimport AppRouter from 'components/Router';\nimport {authService} from 'fbase';\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  //const [isLoggedIn, setIsLoggedIn] = useState(false); // 얘는 사실, Boolean(userObj)로 대체가 가능함. 없어도 됨.\n  const [userObj, setUserObj] = useState(null); // userObj는 어플리케이션의 가장 상위인 App.js에 존재해야 함.\n  // EditProfile.js, Profile.js 등등 여러 곳에서 사용하기 때문에 Router로 보내서, Router에서 여러 곳으로 뿌려줄 수 있다.\n  // 각각 따로따로 firebase.auth를 불러줘도 되지만, 이렇게 하면 한 곳에서만 userObj에 변화가 일어나도 그 즉시 전체적으로 변화가 일어나게 된다.\n\n\n  useEffect(() => {\n    // 일종의 이벤트 리스너와 같다. auth의 state에 변화가 있는지를 듣고 있다가, 변화가 생기면 그에 맞는 행동을 취함.\n    // user가 로그인하거나, 로그아웃하거나 할 때 변화가 생김.\n    authService.onAuthStateChanged((user) => {\n      // console.log(user);\n      if(user) {\n        //setIsLoggedIn(true);\n        setUserObj({\n          displayName : user.displayName,\n          uid : user.uid,\n          email : user.email,\n          updateProfile : (args) => user.updateProfile(args),\n          profileImage : user.photoURL\n          // updateProfile은 원래 user 객체에 존재하는 메소드. 우리가 원하는 메소드를 포함한 객체를 만들기 위해 function을 하나 더 거치도록 만들어준 것. 메소드를 위한 중간 메소드.\n        });\n        // 근데 user 객체같은 경우는, console.log 해보면 객체의 덩어리가 너무 크다. 이런 경우에는 react.js가 state의 변화를 올바르게 파악할 수가 없음. 그래서 객체의 크기를 줄여줘야 한다.\n\n      } else {\n        //setIsLoggedIn(false);\n        setUserObj(null);\n      }\n      setInit(true);\n    });\n  }, []);\n\n  const refreshUser = () => {\n    // Profile에서 user의 정보를 변경해줘도, Navigation은 변화가 없다.\n    // Navigation은 firebase 자체에 연결되어있는 게 아닌, userObj에 간접 연결되어있기 때문.\n    // 그래서 react.js의 state로 저장된 userObj를 직접 수정해줘야 한다.\n    // setUserObj(authService.currentUser);\n    // 역시나 state 변화를 올바르게 인지하기 위해 객체 크기를 줄여준다.\n    const user = authService.currentUser;\n    setUserObj({\n      displayName : user.displayName,\n      uid : user.uid,\n      email : user.email,\n      updateProfile : (args) => user.updateProfile(args),\n      profileImage : user.photoURL\n    });\n  }\n\n  return (\n    <>\n      <footer>&copy; {new Date().getFullYear()} Twitter Clone</footer>\n      {init ? <AppRouter refreshUser={refreshUser} isLoggedIn={Boolean(userObj)} userObj={userObj}/> : \"Initializing...\"}\n    </>\n  );\n  // 초기화가 되었으면 Router를 보여주고, 아니면 숨김\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\nimport \"./styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}