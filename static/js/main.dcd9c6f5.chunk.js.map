{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Tweet.js","components/TweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebaseConfig","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","REACT_APP_MESSAGIN_ID","appId","firebase","firebaseInstance","authService","dbService","storageService","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","e","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","auth","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Tweet","tweetObj","isOwner","editing","setEditing","text","newTweet","setNewTweet","onDeleteClick","window","confirm","doc","id","delete","refFromURL","attachmentUrl","toggleEditing","update","key","autoFocus","alt","src","faTrash","faPencilAlt","TweetFactory","userObj","tweet","setTweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","collection","add","maxLength","htmlFor","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","tweets","setTweets","useEffect","onSnapshot","snapshot","tweetArray","docs","map","marginTop","refreshUser","history","useHistory","displayName","newDisplayName","setNewDisplayName","getMyTweets","where","orderBy","get","updateProfile","signOut","push","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","AppRouter","isLoggedIn","maxWidth","width","margin","exact","path","Profile","App","init","setInit","setIsLoggedIn","setUserObj","onAuthStateChanged","user","args","currentUser","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dcd9c6f5.chunk.js","sourcesContent":["import * as firebase from 'firebase/app';\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\r\n    appId: process.env.REACT_APP_APP_ID\r\n};\r\n// CRA 사용 시에는 환경변수의 이름이 REACT_APP으로 시작해야한다. 반드시.\r\n// .env의 사용은 실제 빌드 시에는 보안에 도움이 되지 않는다. 깃헙에 올릴 때만 도움이 되는 것.\r\n// .env는 루트 디렉토리에 있어야 함.\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\nexport const authService = firebase.auth();\r\nexport const dbService = firebase.firestore();\r\nexport const storageService = firebase.storage();","// component를 나누는 기준은 딱히 없음.\r\n// 그냥 어떤 단위의 태그로 인해 코드가 지나치게 길어진다면, 걔를 따로 분리해주면 됨.\r\n// 하나의 component는 한 가지 역할만 잘 하면 된다.\r\nimport { authService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst AuthForm = () => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [newAccount, setNewAccount] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n\r\n    const toggleAccount = () => setNewAccount((prev) => !prev);\r\n\r\n    const onChange = e => {\r\n        const {target : {name, value}} = e;\r\n        \r\n        if(name === \"email\") {\r\n            setEmail(value);\r\n        } else if(name === \"password\") {\r\n            setPassword(value);\r\n        }\r\n    };\r\n\r\n    const onSubmit = async e => {\r\n        e.preventDefault();\r\n        try {\r\n            let data;\r\n            if(newAccount) {\r\n                // create account\r\n                data = await authService.createUserWithEmailAndPassword(email, password);\r\n            } else {\r\n                // log in\r\n                data = await authService.signInWithEmailAndPassword(email, password);\r\n            }\r\n            console.log(data);\r\n        } catch(error) {\r\n            setError(error.message);\r\n        }\r\n\r\n    };\r\n\r\n    return (\r\n        <>\r\n        <form onSubmit={onSubmit} className=\"container\">\r\n            <input type=\"email\" name=\"email\" className=\"authInput\" placeholder=\"Email\" required value={email} onChange={onChange} />\r\n            <input type=\"password\" name=\"password\" className=\"authInput\" placeholder=\"Password\" required value={password} onChange={onChange} />\r\n            <input type=\"submit\" className=\"authInput authSubmit\" value={newAccount ? \"Create New Account\" : \"Sign In\"} />\r\n            {error && <span className=\"authError\">error</span>}\r\n        </form>\r\n        <span onClick={toggleAccount} className=\"authSwitch\">\r\n            {newAccount ? \"Sign In\" : \"Create New Account\"}\r\n        </span>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AuthForm;","import { authService, firebaseInstance } from \"fbase\";\r\nimport React from \"react\";\r\nimport AuthForm from \"components/AuthForm\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter, faGoogle, faGithub} from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nconst Auth = () => {\r\n    const onSocialClick = async e => {\r\n        const {target : {name}} = e;\r\n        let provider;\r\n        if(name === \"google\") {\r\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n        } else if(name === \"github\") {\r\n            provider = new firebaseInstance.auth.GithubAuthProvider();\r\n        }\r\n        const data = await authService.signInWithPopup(provider);\r\n        console.log(data);\r\n    };\r\n\r\n    return (\r\n        <div className=\"authContainer\">\r\n            <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"3x\" style={{ marginBottom : 30 }} />\r\n            <AuthForm />\r\n            <div className=\"authBtns\">\r\n                <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\r\n                    Sign in with Google <FontAwesomeIcon icon={faGoogle} />\r\n                </button>\r\n                <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\r\n                    Sign in with Github <FontAwesomeIcon icon={faGithub} />\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\nexport default Auth;","import { dbService, storageService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Tweet = ({tweetObj, isOwner}) => {\r\n    const [editing, setEditing] = useState(false); // editing mode인지를 알려주는 boolean\r\n    const [newTweet, setNewTweet] = useState(tweetObj.text); // input에 입력된 text를 가져다 update해줌\r\n\r\n    const onDeleteClick = async () => {\r\n        const ok = window.confirm(\"Are you sure you want to delete this tweet?\");\r\n        if(ok) {\r\n            // doc(document)의 id를 알고있기 때문에 삭제의 구현이 어렵지 않다.\r\n            await dbService.doc(`tweets/${tweetObj.id}`).delete();\r\n            await storageService.refFromURL(tweetObj.attachmentUrl).delete();\r\n        }\r\n    };\r\n\r\n    const toggleEditing = () => setEditing((prev) => !prev);\r\n    \r\n    const onSubmit = async e => {\r\n        // update tweet 구현\r\n        e.preventDefault();\r\n        await dbService.doc(`tweets/${tweetObj.id}`).update({\r\n            text : newTweet\r\n        });\r\n        toggleEditing();\r\n    };\r\n\r\n    const onChange = e => {\r\n        // update tweet input의 내용이 변하면 그대로 newTweet에 적용\r\n        const {target : {value}} = e;\r\n        setNewTweet(value);\r\n    };\r\n\r\n    return (\r\n        <div className=\"tweet\" key={tweetObj.id}>\r\n            {editing ? (\r\n                <>\r\n                    <form onSubmit={onSubmit} className=\"container tweetEdit\">\r\n                        <input type=\"text\" placeholder=\"Edit your tweet!\" onChange={onChange} value={newTweet} required autoFocus className=\"formInput\"/>\r\n                        <input type=\"submit\" value=\"Update tweet\" className=\"formBtn\" />\r\n                    </form>\r\n                    <span onClick={toggleEditing} className=\"formBtn cancelBtn\">Cancel</span>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <h4>{tweetObj.text}</h4>\r\n                    {tweetObj.attachmentUrl && <img alt=\"\" src={tweetObj.attachmentUrl} />}\r\n                    {/* 트윗을 삭제하거나 수정하는 버튼이 해당 트윗의 작성자에게만 보이도록 */}\r\n                    {isOwner && (\r\n                        <>\r\n                            <div className=\"tweet__actions\">\r\n                                <span onClick={onDeleteClick}>\r\n                                    <FontAwesomeIcon icon={faTrash} />\r\n                                </span>\r\n                                <span onClick={toggleEditing}>\r\n                                    <FontAwesomeIcon icon={faPencilAlt} />\r\n                                </span>\r\n                            </div>\r\n                        </>\r\n                    )}\r\n                </>\r\n            )}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Tweet;","import { storageService, dbService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst TweetFactory = ({ userObj }) => {\r\n    const [tweet, setTweet] = useState(\"\");\r\n    const [attachment, setAttachment] = useState(\"\"); // attachment = file\r\n\r\n    const onSubmit = async e => {\r\n        if(tweet === \"\") {\r\n            return;\r\n        }\r\n        e.preventDefault();\r\n        let attachmentUrl = \"\";\r\n        if(attachment !== \"\") { // attachment를 올리지 않을 수도 있으므로.\r\n            const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\r\n            const response = await attachmentRef.putString(attachment, \"data_url\");\r\n            attachmentUrl = await response.ref.getDownloadURL();\r\n        }\r\n        const tweetObj = {\r\n            text : tweet,\r\n            createdAt : Date.now(),  \r\n            creatorId : userObj.uid, // userObj의 uid를 creatorID로 지정. 가입된 사용자의 고유한 id임.\r\n            attachmentUrl : attachmentUrl\r\n        }\r\n        await dbService.collection(\"tweets\").add(tweetObj);\r\n        setTweet(\"\");\r\n        setAttachment(\"\");\r\n    };\r\n\r\n    const onChange = e => {\r\n        const {target : {value}} = e;\r\n        setTweet(value);\r\n    };\r\n\r\n    const onFileChange = e => {\r\n        const {target : {files}} = e;\r\n        const theFile = files[0]; // 어차피 파일은 하나만 올릴거니까.\r\n        // file을 읽기 위해 fileReader API를 사용\r\n        const reader = new FileReader();\r\n        reader.onloadend = finishedEvent => { // reader에 event listener 추가\r\n            // reader에서 파일을 load하는 이벤트가 end되는 순간,\r\n            // 그 event를 finishedEvent 매개변수로 받아온다.\r\n            \r\n            // console.log(finishedEvent);\r\n            // 얘를 console.log 찍어보면 result라는 property가 있음.\r\n            // 걔를 브라우저 URL로 입력해보면 사진이 나옴.\r\n            const {currentTarget : {result}} = finishedEvent;\r\n            setAttachment(result);\r\n        }\r\n        reader.readAsDataURL(theFile); // 사진 파일을 긴 문자열로 얻음\r\n\r\n    };\r\n\r\n    const onClearAttachment = () => setAttachment(\"\");\r\n\r\n    return (\r\n        <form onSubmit={onSubmit} className=\"factoryForm\">\r\n            <div className=\"factoryInput__container\">\r\n                <input type=\"text\" className=\"factoryInput_input\" value={tweet} onChange={onChange} placeholder=\"What's on your mind?\" maxLength={120}></input>\r\n                <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\"></input>\r\n            </div>\r\n            <label htmlFor=\"attach-file\" className=\"factoryInput__label\">\r\n                <span>Add photos</span>\r\n                <FontAwesomeIcon icon={faPlus} />\r\n            </label>\r\n            <input type=\"file\" id=\"attach-file\" accept=\"image/*\" onChange={onFileChange} style={{ opacity : 0 }} />\r\n            {/* 이미지 파일만 허용. 이미지 파일이기만 하면 뭐든 상관 x */}\r\n            {attachment && \r\n                <div className=\"factoryForm_attachment\">\r\n                    <img alt=\"\" src={attachment} style={{backgroundImage : attachment}} />\r\n                    <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\r\n                        <span>Remove</span>\r\n                        <FontAwesomeIcon icon={faTimes} />\r\n                    </div>\r\n                </div>}\r\n            {/* attachment가 있을 때만 attachment를 보여준다. */}\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default TweetFactory;","import Tweet from \"components/Tweet\";\r\nimport { dbService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport TweetFactory from \"components/TweetFactory\";\r\n\r\nconst Home = ({userObj}) => {\r\n    const [tweets, setTweets] = useState([]);\r\n\r\n    // const getTweets = async () => {\r\n    //     // async여야 하기 때문에 별도의 함수로 분리\r\n    //     const dbTweets = await dbService.collection(\"tweets\").get();\r\n    //     dbTweets.forEach(document => {\r\n    //         // tweets 배열에다가 dbTweets의 데이터를 집어넣음.\r\n    //         // 기존에 있던 원소들을 유지하기 위해 ...prev로 걔네들도 넣어줌.\r\n    //         const tweetObject = {\r\n    //             ...document.data(),\r\n    //             id : document.id\r\n    //         }\r\n    //         setTweets((prev) => [tweetObject, ...prev]);\r\n    //          // setter 함수의 매개변수로 함수를 넣어주면, 해당 state의 이전 값을 받아올 수 있음.\r\n    //     });\r\n    // }\r\n\r\n    useEffect(() => {\r\n        //getTweets();\r\n\r\n        // Snapshot을 리스너로 사용하는 방법(실시간 갱신이 가능)\r\n        // snapshot은 데이터베이스에 create, read, update, delete 등 어떤 일이 일어나건 간에 알림을 받게 된다.\r\n        // getTweets와 하는 역할은 동일하지만, re-render가 되지 않는다는 장점이 있다.\r\n        dbService.collection(\"tweets\").onSnapshot(snapshot => {\r\n            // database의 snapshot을 가져와서 배열로 만들어줌.\r\n            // query를 이용하는 게 아니라 snapshot을 이용하기 때문에, 실시간으로 확인이 가능하다.\r\n            const tweetArray = snapshot.docs.map(doc => ({\r\n                id : doc.id,\r\n                ...doc.data() \r\n            }));\r\n            setTweets(tweetArray);\r\n        });\r\n    }, []);\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <TweetFactory userObj={userObj} />\r\n            <div style={{ marginTop : 30 }}>\r\n                {tweets.map((tweet) => (\r\n                    <Tweet key={tweet.id} tweetObj={tweet} isOwner={tweet.creatorId === userObj.uid} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n// 참고로, 하나의 component 내부에서 너무 많은 것들을 하면 안된다. 분리가 필요함.\r\n\r\nexport default Home;","import { authService, dbService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default ({ refreshUser, userObj }) => {\r\n    const history = useHistory();\r\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n\r\n    const onSignOutClick = () => {\r\n        authService.signOut();\r\n        history.push(\"/\");\r\n    };\r\n\r\n    const getMyTweets = async () => {\r\n        // where은 필터링의 역할.\r\n        const tweets = await dbService\r\n                        .collection(\"tweets\")\r\n                        .where(\"creatorId\", \"==\", userObj.uid)\r\n                        .orderBy(\"createdAt\")\r\n                        .get();\r\n        // creatorId라는 field path의 값이 userObj.uid와 같은 애들을 필터링해줌.\r\n        // 원한다면, where 뒤에 또 다른 where을 연달아 사용 가능.\r\n        // orderBy를 추가하면 index가 필요하다는 에러가 발생하는데, index 만들어주면 됨.\r\n        console.log(tweets.docs.map((doc) => doc.data()));\r\n    };\r\n\r\n    const onChange = (e) => {\r\n        const {target : {value}} = e;\r\n        setNewDisplayName(value);\r\n    }\r\n\r\n    const onSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if(userObj.displayName !== newDisplayName) {\r\n            // displayName에 변경이 없으면, profile을 update하지 않음.\r\n            // firestore의 한계점이 드러나는 부분. UpdateProfile로는 displayName과 photoURL정도밖에 수정할 수 없다.\r\n            // 만약 유저 정보를 더 많이 담고싶다면, user라는 이름의 collection을 만들어 유저 하나 당 document를 만들고, 거기다가 정보를 저장하는 방식을 사용하면 됨.\r\n            const response = await userObj.updateProfile({\r\n                displayName : newDisplayName\r\n            });\r\n            refreshUser();\r\n            // firestore에 있는 profile을 고친 후, react.js에 있는 profile도 바로 refresh 해준다. -> 화면에 실시간 적용\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getMyTweets();\r\n    }, []);\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <form onSubmit={onSubmit} className=\"profileForm\">\r\n                <input onChange={onChange} type=\"text\" autoFocus placeholder=\"Display name\" value={newDisplayName} className=\"formInput\" />\r\n                <input type=\"submit\" value=\"Update Profile\" className=\"formBtn\" style={{ marginTop : 10 }} />\r\n            </form>\r\n            <span className=\"formBtn cancelBtn logOut\" onClick={onSignOutClick}>\r\n                Sign Out\r\n            </span>\r\n        </div>\r\n    ); \r\n}","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Navigation = ({ userObj }) => \r\n    <nav>\r\n        <ul style={{ display : \"flex\", justifyContent : \"center\", marginTop : 50 }}>\r\n            <li>\r\n                <Link to=\"/\" style={{ marginRight : 10 }}>\r\n                    <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\r\n                </Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/profile\" style={{\r\n                    marginLeft : 10,\r\n                    display : \"flex\",\r\n                    flexDirection : \"column\",\r\n                    alignItems : \"center\",\r\n                    fontSize : 12\r\n                }}>\r\n                    <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\r\n                    <span style={{ marginTop : 10 }}>\r\n                        {userObj.displayName ? `${userObj.displayName}'s Profile` : \"Profile\"}\r\n                    </span>\r\n                </Link>\r\n            </li>\r\n        </ul>\r\n    </nav>;\r\nexport default Navigation;","import React from \"react\";\r\nimport {HashRouter as Router, Route, Switch} from \"react-router-dom\";\r\nimport Auth from \"routes/Auth\";\r\nimport Home from \"routes/Home\";\r\nimport Profile from \"routes/Profile\";\r\nimport Navigation from \"components/Navigation\";\r\n\r\nconst AppRouter = ({refreshUser, isLoggedIn, userObj}) => {\r\n    return (\r\n        <Router>\r\n            {isLoggedIn && <Navigation userObj={userObj} />} \r\n            {/* 로그인이 되어 있을 때만 Navigation을 보여줌. */}\r\n            <Switch> \r\n                {isLoggedIn ? (\r\n                    // switch는 하위 라우터들 중 한 번에 하나의 Router만 보여줌.\r\n                    // Log in이 되어있으면 Home 화면만 보여줌.\r\n                    <>\r\n                        <div style={{\r\n                            maxWidth : 890, \r\n                            width : \"100%\", \r\n                            margin : \"0 auto\", \r\n                            marginTop : 80, \r\n                            display : \"flex\", \r\n                            justifyContent : \"center\"\r\n                            }}\r\n                        >\r\n                            <Route exact path = \"/\">\r\n                                <Home userObj={userObj} />\r\n                            </Route>\r\n                            <Route exact path = \"/profile\">\r\n                                <Profile refreshUser={refreshUser} userObj={userObj} />\r\n                            </Route>\r\n                            {/*<Redirect from=\"*\" to=\"/\" />*/}\r\n                        </div>\r\n                    </>\r\n                    // <> </>는 Fragment. 부모 요소가 없는 많은 요소들을 render 하고싶을 때, 근데 div나 span에 집어넣기는 싫을 때 사용.\r\n                ) : (\r\n                    // Log in이 되어 있지 않으면 Auth 화면을 보여줌.\r\n                    <>\r\n                        <Route exact path = \"/\">\r\n                            <Auth />\r\n                        </Route>\r\n                        {/*<Redirect from=\"*\" to=\"/\" />*/}\r\n                    </>\r\n                )}\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default AppRouter;","import React, { useEffect, useState } from 'react';\nimport AppRouter from 'components/Router';\nimport {authService} from 'fbase';\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // 얘는 사실, Boolean(userObj)로 대체가 가능함. 없어도 됨.\n  const [userObj, setUserObj] = useState(null); // userObj는 어플리케이션의 가장 상위인 App.js에 존재해야 함.\n  // EditProfile.js, Profile.js 등등 여러 곳에서 사용하기 때문에 Router로 보내서, Router에서 여러 곳으로 뿌려줄 수 있다.\n  // 각각 따로따로 firebase.auth를 불러줘도 되지만, 이렇게 하면 한 곳에서만 userObj에 변화가 일어나도 그 즉시 전체적으로 변화가 일어나게 된다.\n\n\n  useEffect(() => {\n    // 일종의 이벤트 리스너와 같다. auth의 state에 변화가 있는지를 듣고 있다가, 변화가 생기면 그에 맞는 행동을 취함.\n    // user가 로그인하거나, 로그아웃하거나 할 때 변화가 생김.\n    authService.onAuthStateChanged((user) => {\n      if(user) {\n        setIsLoggedIn(true);\n        setUserObj({\n          displayName : user.displayName,\n          uid : user.uid,\n          updateProfile : (args) => user.updateProfile(args)\n          // updateProfile은 원래 user 객체에 존재하는 메소드. 우리가 원하는 메소드를 포함한 객체를 만들기 위해 function을 하나 더 거치도록 만들어준 것. 메소드를 위한 중간 메소드.\n        });\n        // 근데 user 객체같은 경우는, console.log 해보면 객체의 덩어리가 너무 크다. 이런 경우에는 react.js가 state의 변화를 올바르게 파악할 수가 없음. 그래서 객체의 크기를 줄여줘야 한다.\n\n      } else {\n        setIsLoggedIn(false);\n        setUserObj(null);\n      }\n      setInit(true);\n    });\n  }, []);\n\n  const refreshUser = () => {\n    // Profile에서 user의 정보를 변경해줘도, Navigation은 변화가 없다.\n    // Navigation은 firebase 자체에 연결되어있는 게 아닌, userObj에 간접 연결되어있기 때문.\n    // 그래서 react.js의 state로 저장된 userObj를 직접 수정해줘야 한다.\n    // setUserObj(authService.currentUser);\n    // 역시나 state 변화를 올바르게 인지하기 위해 객체 크기를 줄여준다.\n    const user = authService.currentUser;\n    setUserObj({\n      displayName : user.displayName,\n      uid : user.uid,\n      updateProfile : (args) => user.updateProfile(args)\n    });\n  }\n\n  return (\n    <>\n      {init ? <AppRouter refreshUser={refreshUser} isLoggedIn={isLoggedIn} userObj={userObj}/> : \"Initializing...\"}\n      <footer>&copy; {new Date().getFullYear()} Twitter Clone</footer>\n    </>\n  );\n  // 초기화가 되었으면 Router를 보여주고, 아니면 숨김\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\nimport \"./styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}